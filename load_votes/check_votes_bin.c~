/* This file is (C) copyright 2001 Software Improvements, Pty Ltd */

/* This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA. */
#include <stdlib.h>
#include <common/database.h>
#include <common/evacs.h>
#include "check_votes.h"
#include "compare_votes.h"

struct vote_list *table1_votes=NULL, *table2_votes=NULL;

struct preference_set get_prefs_for_vote(PGconn *conn,
					 unsigned int vote_index) 
{
	PGresult *result;
	struct preference_set preferences;
	unsigned int num_rows, i;

	preferences.num_preferences =
		SQL_singleton_int(conn,
				  "SELECT COUNT(*) "
				  "FROM confirmed_preference "
				  "WHERE vote_index=%u;",
				  vote_index);

	result = SQL_query(conn,
			   "SELECT group_index, "
			   "db_candidate_index, "
			   "prefnum "
			   "FROM confirmed_preference "
			   "WHERE vote_index=%u "
			   "ORDER BY group_index,db_candidate_index,prefnum;",
			   vote_index);

	num_rows = PQntuples(result); 


	for (i=0; i<num_rows; i++) {
		preferences.candidates[i].group_index 
			= atoi(PQgetvalue(result, i, 0));
		preferences.candidates[i].db_candidate_index 
			= atoi(PQgetvalue(result, i, 1));
		preferences.candidates[i].prefnum 
			= atoi(PQgetvalue(result, i, 2));
	}
	return preferences;

}

/*
  Compare two integers. Return +ve one if a greater, -ve one if b greater,
  otherwise return zero. This is used by cmp_votes. 
*/
static int compare_int(int a, int b)
{
	if (a>b)
		return 1;
	if (a<b)
		return -1;
	return 0;
}

/*
  Compare 2 votes.
  Return +ve one if the first vote is higher, return -ve one if the second
  is higher, otherwise return 0.
  This function is used by qsort.
*/
static int cmp_votes(const void *a,const void *b)
{
	struct vote *a_vote,*b_vote;
	int res,i;

	a_vote = (struct vote *)a;
	b_vote = (struct vote *)b;

	if ((res = compare_int(a_vote->polling_place_code,
			       b_vote->polling_place_code)))
		return res;
	if ((res = compare_int(a_vote->electorate_code,
			       b_vote->electorate_code)))
		return res;
	if ((res = compare_int(a_vote->preferences.num_preferences,
			       b_vote->preferences.num_preferences)))
		return res;
	for (i=0;i < a_vote->preferences.num_preferences;i++) {
		if ((res = compare_int(
			a_vote->preferences.candidates[i].group_index,
			b_vote->preferences.candidates[i].group_index)))
			return res;
		if ((res = compare_int(
			a_vote->preferences.candidates[i].db_candidate_index,
			b_vote->preferences.candidates[i].db_candidate_index)))
			return res;
		if ((res = compare_int(
			a_vote->preferences.candidates[i].prefnum,
			b_vote->preferences.candidates[i].prefnum)))
			return res;
	}
	return 0;
}

/*
  Load the votes from the 2 databases for comparison
*/
static unsigned int get_votes_from_db(void)
{
	PGconn *conn;
	PGresult *result1, *result2;
	unsigned int num_rows1,num_rows2,i;

	conn = connect_db(LOAD1DB_NAME);	

	/* Fill out list of votes from table1 */
	result1 = SQL_query(conn,
			    "SELECT index,polling_place_code,electorate_code "
			    "FROM confirmed_vote;");

	num_rows1 = PQntuples(result1);

	table1_votes = malloc(sizeof(*table1_votes) +
			      sizeof(table1_votes->vote[0])*num_rows1);

	for (i=0; i<num_rows1; i++) {
		table1_votes->vote[i].polling_place_code 
			= atoi(PQgetvalue(result1, i, 1));
		table1_votes->vote[i].electorate_code 
			= atoi(PQgetvalue(result1,i,2));
		table1_votes->vote[i].preferences 
			= get_prefs_for_vote(conn,
					     atoi(PQgetvalue(result1,i,0)));
	}

	PQclear(result1);
	PQfinish(conn);

	conn = connect_db(LOAD2DB_NAME);	

	/* Fill out list of votes from table2 */
	result2 = SQL_query(conn,
			    "SELECT index,polling_place_code,electorate_code "
			    "FROM confirmed_vote;");

	num_rows2 = PQntuples(result2);
	
	/* If different number of rows - may as well pull out now */
	if ( num_rows1 != num_rows2 ) {
		PQclear(result2);
		PQfinish(conn);
		return 0;
	}

	/* Sort the first table */
	qsort(&table1_votes->vote[0],num_rows1,sizeof(table1_votes->vote[0]),
	      cmp_votes);

	table2_votes = malloc(sizeof(*table2_votes) +
			      sizeof(table2_votes->vote[0])*num_rows2);

	for (i=0; i<num_rows2; i++) {
		table2_votes->vote[i].polling_place_code 
			= atoi(PQgetvalue(result2, i, 1));
		table2_votes->vote[i].electorate_code 
			= atoi(PQgetvalue(result2,i,2));
		table2_votes->vote[i].preferences 
			= get_prefs_for_vote(conn,
					     atoi(PQgetvalue(result2,i,0)));
	}

	PQclear(result2);
	PQfinish(conn);

 	/* Sort the second table */
	qsort(&table2_votes->vote[0],num_rows1,sizeof(table2_votes->vote[0]),
	      cmp_votes);

	return num_rows2;
}

/* DDS3.4: Check Votes */
bool check_votes (void)
{
	bool equal=false;
	unsigned int number_of_votes, i;

	number_of_votes = get_votes_from_db();
	
	for (i=0; i<number_of_votes; i++) {
		equal = compare_votes(&table1_votes->vote[i], 
				      &table2_votes->vote[i]);


		if (!equal)
			break;
	}

	if (table1_votes != NULL)
		free(table1_votes);
	if (table2_votes != NULL)
		free(table2_votes);

	if (!equal) {
		printf("Second Disk is not in agreement with "
		       "the First. Please start again.\n");
		return false;
	}
	return true;
}

int main(void) {

	bool ret;
	
	ret = check_votes();
	/* if something else fails, we exit with 01, so we can't
	   return 1 on success */
	if(ret) {
		return 0;
	} else { 
		return -1;
	}
}
